import flet
from flet import (
    ElevatedButton,
    FilePicker,
    FilePickerResultEvent,
    Page,
    Row,
    Text,
    icons,
    CircleAvatar,
    colors,
    Image,
    Column,
    Container,
    padding,
    alignment,
    FontWeight,
    Divider,
    FilledButton,
    CircleBorder,
    ButtonStyle,
    MaterialState,
    IconButton,
    AlertDialog,
    TextButton,
    Banner,
    Icon
)
from utils.exe_to_png import exe_to_png
from load_model import load_model
import torch
from torchvision import transforms

model = load_model("model_new_dataset.pth")
classes =["benign", "malware"]

def main(page: Page):
    page.scroll = "Auto"
    page.window_width = 1000        # window's width is 200 px
    page.window_height = 800       # window's height is 200 px
    page.bgcolor = colors.BLACK
    page.update()
    color_file_detected = colors.BLACK
    
    dlg = AlertDialog(
        title=Text("You have to select a file :)", font_family="Verdana")
    )
    
    def close_banner(e):
        page.banner.open = False
        page.update()
    
    def show_mlw_banner():
        page.banner = Banner(
            bgcolor=colors.RED,
            leading=Icon(icons.WARNING_AMBER_ROUNDED, color=colors.AMBER, size=40),
            content=Text(
                "Malware Detected!!!"
            ),
            actions=[
                TextButton("Close", on_click=close_banner, style=ButtonStyle(color=flet.colors.BLACK),),
            ],
        )
        page.banner.open = True
        page.update()
        
    def show_safe_banner():
        page.banner = Banner(
            bgcolor=colors.GREEN,
            leading=Icon(icons.SAFETY_CHECK, color=colors.GREEN_800, size=40),
            content=Text(
                "The file is safe"
            ),
            actions=[
                TextButton("Close", on_click=close_banner, style=ButtonStyle(color=flet.colors.BLACK),),
            ],
        )    
        page.banner.open = True
        page.update()

    def open_dlg():
        page.dialog = dlg
        dlg.open = True
        page.update()
        
    # Pick files dialog
    def pick_files_result(e: FilePickerResultEvent):
        try:
            close_banner({})
        except: pass
        selected_files.value = (
            e.files[0].path if e.files else "Empty"
        )
        selected_files.update()

    pick_files_dialog = FilePicker(on_result=pick_files_result)
    selected_files = Text(value="Empty", bgcolor=colors.BLACK, color=colors.WHITE)

    def toggle_icon_button(e):
        if selected_files.value == "Empty":
            open_dlg()
            return
        try:
            close_banner({})
        except: pass
        e.control.selected = not e.control.selected
        e.control.update()
        if e.control.selected:
            # TO CHANGE: as soon as we have the function to compute the classification
            # execute classification
            # get result
            img = exe_to_png(selected_files.value)
            
            tf = transforms.Compose([transforms.ToTensor()])
            img_tf = tf(img).float().unsqueeze(0)
            
            pred = model(img_tf)
            print(pred)
            _, idx_result = torch.max(pred.data, 1)
            result = classes[idx_result]
            if result == "malware":
                show_mlw_banner()
            else:
                show_safe_banner()
            e.control.selected = False
            e.control.update()
            return
        else:
            # stop classification
            return
            
    # hide all dialogs in overlay
    page.overlay.extend([pick_files_dialog])

    page.add(
        
        Container(
            bgcolor=flet.colors.BLACK,
            # alignment for aligning content in center
            alignment=alignment.center,
            # child control
            content=Column(
                alignment="center",
                horizontal_alignment="center",
                controls=[
                    Text("Edoardo Allegrini, Samuele Bella", color=colors.AMBER),
                    Image(
                        src=f"https://web.uniroma1.it/economia_lt/sites/default/files/images/icon/default.png",
                        width=100,
                        height=100,
                        fit=flet.ImageFit.CONTAIN,
                    ),
                    Text(
                        "Malware Analyzer",
                        size=30,
                        color=colors.WHITE,
                        weight=FontWeight.W_100,
                    ),
                    Divider(
                        height=10,
                        thickness=3,
                    ),
                    Column(
                        height=400,
                        controls=[
                        Container(
                            bgcolor=color_file_detected,
                            height=300,
                            content=IconButton(
                                icon=icons.NOT_STARTED_ROUNDED,
                                icon_color="blue_50",
                                icon_size=150,
                                selected_icon=icons.PAUSE_CIRCLE_FILLED_ROUNDED,
                                selected=False,
                                on_click=toggle_icon_button,
                                style=ButtonStyle(color={"selected": colors.RED, "": colors.GREEN}),
                            ),
                            padding=50
                        )
                        ]
                    )
                ]
            )
        )
    )
    
    page.add(
            Container(
                padding=padding.symmetric(horizontal=40),
                bgcolor=flet.colors.BLACK,
                alignment=alignment.center,
                content=
                    Column(
                        alignment="center",
                        horizontal_alignment="center",
                        spacing=30,
                        controls=[
                            ElevatedButton(
                                "Pick file",
                                icon=icons.UPLOAD_FILE,
                                on_click=lambda _: pick_files_dialog.pick_files(
                                    allow_multiple=True
                                ),
                            ),
                            selected_files,
                        ]
                    )
            )
    )


flet.app(target=main)


